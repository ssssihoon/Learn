# C++

## 소멸자

- 객체가 소멸되는 시점에서 자동으로 호출되는 함수
    - 오직 한번만 자동 호출, 임의로 호출할 수 없음
    - 객체 메모리 소멸 직전 호출됨

`~Circle();`  → 소멸자 함수 선언.

`Circle :: ~Circle() {`            → 소멸자 함수 구현

`}`

### 특징

- 객체는 생성의 반대순으로 소멸된다.
- 객체가 사라질 때 마무리 작업을 위함
- 소멸자는 리턴 타입이 없고, 어떤 값도 리턴하면 안됨.
- 중복 불가능. 한 클래스 내에 오직 한 개만 작성 가능
- 소멸자가 선언되어 있지 않으면 기본 소멸자가 자동 생성

## 생성자 / 소멸자 실행 순서

### 객체 생성 순서

- 전역객체 : 프로그램에 선언된 순서로 생성
- 지역객체 : 함수가 호출되는 순간에 순서대로 생성

### 객체 소멸 순서

- 함수가 종료하면 , 지역 객체가 생성된 순서의 역순으로 소멸
- 프로그램이 종료하면 , 전역 객체가 생성된 순서의 역순으로 소멸

### new로 동적 생성된 객체의 경우

- new를 실행하는 순간 객체 생성
- delete 연산자를 실행할 때 객체 소멸

## 접근 지정자

- private : 동일한 클래스의 멤버 함수에만 제한
- public : 모든 다른 클래스에 허용
- protected : 클래스 자신과 상속받은 자식 클래스에만 허용

## 인라인 함수

- 짧은 코드의 함수를 인라인 함수로 처리해 속도를 향상시킨다.
- 여러번 불러올 때

`inline`

```cpp
#include <iostream>
using namespace std;

**inline int odd(int x){
    return (x%2);
}**

int main() {
    int sum = 0;

    for(int i = 1; i <= 10000; i ++){
        if(odd(i))
            sum += i ;
    }
    cout << sum;
}
```

### 인라인 함수에 대한 처리

- 매크로와 유사
- 코드 확장 후 인라인 함수는 사라짐

### 인라인 함수 호출

- 함수 호출에 따른 오버헤드 존재하지 않음
- 프로그램 실행 속도 개선

### 인라인 제약 사항

- recursion, 긴 함수, static, 반복문, switch문, goto문 등을 가진 함수는 수용하지 않음.

### 자동 인라인 함수

- 클래스 선언부에 구현된 멤버 함수
    - inline으로 선언할 필요 없음 자동 인라인 처리

# 구조체

- 구조체의 디폴트 접근 지정 - public ,     클래스의 경우? private

```cpp
# include <iostream>
using namespace std;

struct StructCircle {
private:
    int radius;
public:
    StructCircle(int r){radius = r;}
    double getArea();
};

double StructCircle::getArea() {
    return 3.14*radius*radius;
}

int main(){
    StructCircle waffle(3);
    cout << "면적은 " << waffle.getArea();
}
```

# 객체 포인터 선언 및 활용

```cpp
# include <iostream>
using namespace std;

class Circle{
    int radius;
public:
    Circle(){
        radius = 1;
    }
    Circle(int r){
        radius = r;
    }
    double getArea();
};

double Circle ::getArea() {
    return radius * radius * 3.14;
}

int main(){
    Circle donut;
    Circle pizza(30);

    Circle *p; // 포인터 선언
    p = &donut; // 접근
    cout << p-> getArea() << endl;

    p = &pizza;
    cout << (*p).getArea() << endl;
}
```

## 객체 배열, 생성 및 소멸

### 객체 배열 선언 가능

- 기본 타입 배열 선언과 형식 동일
    - int n[3];
    - Circle c[3]; : Circle타입의 배열 선언
- 매개 변수 있는 생성자를 호출할 수 없음
- 배열 소멸은 생성의 반대순으로 소멸
    - c[2] → c[1] → c[0] 순으로 소멸자 실행

기본생성자 Circle(){} <- 이것이 없는데
매개변수 있는 함수는 있으니 상관없지만
기본 생성자가 없는 circleArray의 경우 안됨.

## 객체 배열 초기화

- 객체 배열 초기화 방법
    - 배열의 각 원소 객체당 생성자 지정하는 방법.

`Circle circleArray[3] = { Circle(10), Circle(20), Circle()};`

```cpp
#include <iostream>
using namespace std;

class Circle{
    int radius ;
public:
    Circle() { radius = 1;}
    Circle(int r) { radius = r;}
    void setRadius(int r){ radius = r;}
    double getArea();
};

double Circle ::getArea() {
    return 3.14 * radius * radius;
}

int main(){
    Circle circleArray[3] = { Circle(10), Circle(20), Circle()};

    Circle *p;
    p = circleArray;

    for (int i = 0 ; i < 3; i ++){
        cout << (*p).getArea() << endl;
        p ++ ;
    }
}
```

# 2차원 배열

```cpp
# include <iostream>
using namespace std;

class Circle{
    int radius;
public:
    Circle(){}
    Circle(int r){radius = r;}
    void setRadius(int r){radius = r;}
    double getArea();
};

double Circle ::getArea() {
    return 3.14 * radius * radius;
}

int main(){
    Circle circleArray[3][3];

    int num = 1;

    for (int i = 0 ; i < 2; i ++){
        for (int j = 0; j < 3; j ++){
            circleArray[i][j] = num;
            num ++;
        }
    }
    for (int i = 0 ; i < 2; i ++){
        for (int j = 0; j < 3; j ++){
            cout << "[" << i << "," << j << "]" << "면적은? : " << circleArray[i][j].getArea() << endl;
        }
    }
}
```

# 동적 메모리 할당 및 반환

## 정적 할당

- 변수 선언을 통해 필요한 메모리 할당
    - 많은 양의 메모리는 배열 선언을 통해 할당

## 동적 할당

- 필요한 양이 예측되지 않는 경우. 프로그램 작성시 할당 받을 수 없음
- **실행 중에 힙 메모리에서 할당**

C 동적 메모리 할당 malloc free와 같이 C++은 … 

- new연산자
    - 객체 할당 시 생성자 호출
- delete연산자
    - 객체의 동적 소멸 - 소멸자 호출 뒤 객체를 힙에 반환

```cpp
int *p;

p = new int; // int 타입 할당

if (!p){ // 만약 p가 할당되지 않았다면...
	cout << "메모리를 할당할 수 없습니다. " << endl;
}

*p = 5; // 할당 받은 정수 공간에 5 대입
int n = *p; // n에 p값 대입
/*     ..........

*/
delete p; // 메모리 반환.
```

### 주의 사항

- 동일한 메모리 두 번 반환 할 수 없음.
- 동적으로 할당 받지 않은 메모리 반환할 수 없음.

## 배열의 동적 할당 및 반환

`int *p = new int [3];`  // 동적 배열 할당

`delete [] p;` // 배열 반환

```cpp
/* 사용자로부터 입력할 정수의 개수를
입력 받아 배열을 동적 할당 받고,
하나씩 정수를 입력 받은 후
합을 출력하는 프로그램을 작성하라.*/

# include <iostream>
using namespace std;

int main(){
    int cnt;
    cout << "몇 개의 정수 ? : " << endl;
    cin >> cnt;

    int *p = new int [cnt];

    if(cnt <= 0){ return 0;}

    if (!p)
    {
        cout << "메모리를 할당받을 수 없습니다 .. " << endl;
        return 0;
    }

    for(int i = 0 ; i < cnt ; i ++)
    {
        cout << "정수를 입력하세요.. " << endl;
        cin >> p[i];
    }

    int sum = 0;
    for(int i = 0 ; i < cnt ; i ++)
    {
        sum += p[i];
    }
    cout << "합 : " << sum << endl;
    cout << "평균 : " << sum / cnt ;

    delete [] p;
}
```

참고로 동적 할당 메모리에 대해서

생성한 순서에 관계없이 delete해도 무관.

delete p;  , delete q; → 소멸자 : p 이후 q 소멸

### 유의 사항

- 동적 할당 메모리 초기화
    - 배열은 동적 할당 시 초기화 불가능 !!!!
- delete시 [] 생략
    - 오류는 아니나 비정상적인 반환임.

```cpp
/* 정수 반지름을 입력 받고 Circle 객체를 동적 생성하여 면적을 출력하라. 음수가 입력되면
프로그램은 종료한다.*/

# include <iostream>
using namespace std;

class Circle{
    int radius;
public:
    Circle();
    Circle(int r);
    ~Circle();
    void setRadius(int r){radius = r;}
    double getArea() {return 3.14 * radius * radius;}
};

Circle :: Circle () {
    radius = 1;
    cout << "생성자 싫랭 radius = " << radius << endl;
}

Circle :: Circle (int r){
    radius = r;
    cout << "생성자 실행 radius = " << radius << endl;
}

Circle :: ~ Circle () {
    cout << "소멸자 실행 radius = " << radius << endl;
}

int main(){

    int circle_radius;

    cout << "정수 반지름 입력 (음수이면 종료) >> ";
    cin >> circle_radius;

    while(circle_radius >= 0)
    {
        Circle *p;
        p = new Circle(circle_radius);

        cout << "원의 면적은 " << (*p).getArea() << endl;

        delete p;

        cout << "정수 반지름 입력 (음수이면 종료) >> ";
        cin >> circle_radius;

    }
}
```

## 객체 배열의 동적 생성과 반환 응용

원을 개수를 입력 받고 Circle 배열을 동적 생성하라. 반지름 값을 입력 받아 Circle 배열에
저장하고, 면적이 100에서 200 사이인 원의 개수를 출력하라

```cpp
#include <iostream>
using namespace std;

class Circle {
    int radius ;
public:
    Circle(){ radius = 1;}
    Circle(int r){
        radius = r;
    }
    double getArea(){
        return radius * radius * 3.14;
    }
};

int main(){
    int cnt = 0;
    int n;
    cout << "생성하고자 하는 원의 개수 ? ";

    cin >> n;

    Circle *pArray = new Circle [n];

    for (int i = 0 ; i < n; i ++){
        int r;
        cout << "원" << i+1 << " : ";

        cin >> r;
        pArray[i] = r;

    }

    for (int i = 0 ; i < n; i ++) {
        cout << pArray[i].getArea() << " ";
        if (100 < pArray[i].getArea() && pArray[i].getArea() < 200)
        {
            cnt++;

        }
    }

    cout << "면적이 100에서 200 사이인 원의 개수는 ? " << cnt << endl;

    delete[] pArray;
}

```

# this 포인터

- 포인터, 객체 자신 포인터
- 클래스의 멤버 함수 내에서만 사용
- 개발자가 선언하는 변수가 아니고, 컴파일러가 선언한 변수

전에 하던 `int r;`  ,  `radius = r;` 하던 것을 

`(int radius)` , `this → radius = radius;` 로 할 수 있음  

## this 가 필요한 이유

- 매개변수의 이름과 멤버변수의 이름이 같은 경우
- 멤버함수가 객체 자신의 주소를 리턴할 때
    - 연산자 중복 시에 매우 필요

## this의 제약 사항

- 멤버 함수가 아닌 함수에서 this 사용 불가
    - 객체와의 관련성이 없기 때문
- static 멤버 함수에서 this 사용 불가
    - 객체가 생기기 전에 static 함수 호출이 있을 수 있기 때문

## this 포인터의 실체

- 컴파일러에서 처리

# string 클래스를 이용한 문자열

`#include <string>`

- 가변 크기의 문자열 : `string str = “I love “`
- 문자열 복사, 문자열 비교, 문자열 길이 등 멤버함수 포함
- cin 에 공백이 입력되면 하나의 문자열로 입력

## string 객체 동적 생성

- `string *p = new string(”C++”);`
- `delete p;`

```cpp
# include <iostream>
# include <string>
using namespace std;

int main(){
    string str;
    string address("서울시 성북구 삼선동");
    string copyAdress(address);
    char text[] = {'L', 'o', 'v', 'e', ' ', 'C', '+', '+', '\0'}; // C-스트링
		string title(text); // "Love C++" 문자열을 가진 스트링 객체 생성

    cout << str << endl;
    cout << address << endl;
    cout << copyAdress << endl;
    cout << title << endl;
    
}
```

## string 배열 선언과 문자열 키 입력 응용

5 개의 string 배열을 선언하고 getline()을 이용하여 문자열을 입력 받아 사전 순으로 가장 뒤에 나오는 문자열을 출력하라. 

문자열 비교는 <, > 연산자를 간단히 이용하면 된다.

```cpp
# include <iostream>
# include <string>
using namespace std;

int main(){
    string strArray[5];
    for (int i = 0; i < 5; i ++){
        cout << "이름 : ";
        getline(cin, strArray[i], '\n');
    }

    string latter = strArray[0];
    for (int i = 0; i < 5; i ++)
    {
        if(latter <= strArray[i]){
            latter = strArray[i];
        }
    }

    cout << "가장 늦게 나오는 문자열은 : " << latter;
}

/*
/Users/sihoon/Desktop/C++/test
이름 : Kim Nam Yun
이름 : Chang Jae Young
이름 : Lee Jae Moon
이름 : Han Won Sun
이름 : Hwang Su hee
가장 늦게 나오는 문자열은 : Lee Jae Moon
*/
```

## 문자열을 입력 받고 회전시키기

빈칸을 포함하는 문자열을 입력 받고, 한 문자씩 왼쪽으로 회전하도록 문자열을 변경하고 출력하라.

- `문자열변수.length()` : 문자열의 길이 반환
- `문자열변수.substr(n, m)` : 문자열을 n~m까지 분리
- sub + first 로 순서를 바꿔 재조합

```cpp
#include <iostream>
#include <string>

using namespace std;

int main(){
    string s;

    cout << "문자열을 입력하세요(한글 안됨)" << endl;
    getline(cin, s, '\n');
    int len = s.length() ;  // 문자열의 길이

    for (int i = 0; i < len; i ++)
    {
        string first = s.substr(0, 1); // 맨 앞의 문자 1개를 문자열로 분리
        string sub = s.substr(1, len-1);
        s = sub + first;
        cout << s << endl;
    }
}
```

## 문자열 처리 응용 - 덧셈 문자열을 입력받아 덧셈 실행

- `int 개수를받을변수.find(’찾을문자’, 인덱스)`
